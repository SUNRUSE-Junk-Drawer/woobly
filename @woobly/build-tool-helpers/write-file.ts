import * as fs from "fs"
import * as path from "path"
import * as zopflipngBin from "zopflipng-bin"
import * as htmlMinifier from "html-minifier"
import * as uglifyJs from "uglify-js"
import shellExecute from "./shell-execute"

export default async function (
  filePath: ReadonlyArray<string>,
  buffer: Buffer,
  production: Boolean,
): Promise<void> {
  const joined = path.join.apply(path, filePath.slice())

  if (production && joined.endsWith(`.png`)) {
    await fs.promises.writeFile(joined, buffer)
    await shellExecute(
      `zopfli compress PNG`,
      zopflipngBin,
      [`-m`, `--lossy_transparent`, `--lossy_8b`, joined],
    )
    return
  }

  if (production && joined.endsWith(`.json`)) {
    const text = buffer.toString()
    const json = JSON.parse(text)
    await fs.promises.writeFile(joined, JSON.stringify(json))
    return
  }

  if (production && joined.endsWith(`.html`)) {
    const text = buffer.toString()
    const minified = htmlMinifier.minify(text, {
      caseSensitive: false,
      collapseBooleanAttributes: true,
      collapseInlineTagWhitespace: true,
      collapseWhitespace: true,
      conservativeCollapse: false,
      decodeEntities: true,
      html5: true,
      includeAutoGeneratedTags: false,
      keepClosingSlash: false,
      minifyCSS: true,
      minifyJS: false,
      minifyURLs: false,
      preserveLineBreaks: false,
      preventAttributesEscaping: false,
      processConditionalComments: false,
      removeAttributeQuotes: true,
      removeComments: true,
      removeEmptyAttributes: true,
      removeEmptyElements: false,
      removeOptionalTags: true,
      removeRedundantAttributes: true,
      removeScriptTypeAttributes: true,
      removeStyleLinkTypeAttributes: true,
      removeTagWhitespace: true,
      sortAttributes: true,
      sortClassName: true,
      trimCustomFragments: true,
      useShortDoctype: true,
    })
    await fs.promises.writeFile(joined, minified)
    return
  }

  if (production && joined.endsWith(`.js`)) {
    const text = buffer.toString()
    const parsed = uglifyJs.minify(text, {
      compress: true,
      mangle: true,
      toplevel: true,
    })

    if (parsed.error) {
      throw parsed.error
    }

    await fs.promises.writeFile(joined, parsed.code)
    return
  }

  await fs.promises.writeFile(joined, buffer)
}
